<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- title -->
    <title><%= @title %></title>
    <!-- style -->
    <link rel='stylesheet' href='//cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack-subset.css'>
    <style>
        ::selection {
            background: #FD3E3E;
        }
        body {
            background: lightcoral;
            color: black;
            font-family: "Hack", monospace;
            font-size: 18px;
            padding: 2rem;
        }
        h1,
        p {
            padding-left: 1rem;
            padding-right: 1rem;
        }
        a {
            color: white;
            font-weight: bold;
        }
        textarea {
            background: white;
            color: black;
            min-width: 100%;
            min-height: 240px;
            font-family: "Hack", monospace;
            font-size: 18px;
            border: 2px solid black;
            padding: 1rem;
            box-sizing: border-box;
            border-radius: 1rem;
            outline: none !important;
        }
        textarea:focus {
            border: 2px solid #FD3E3E;
        }
        span.token-wrapper {
            line-height: 1.5;
        }
        span.token-value {
            font-weight: bold;
            border: 1px solid black;
            padding: 1px 4px;
        }
    </style>
</head>
<body>
    <h1><%= @title %></h1>
    <p><a href="https://github.com/mrsjoberg/pascal-in-ruby">github.com/mrsjoberg/pascal-in-ruby</a></p>
    <!-- editor -->
    <textarea id="editor"></textarea>
    <div id="inputs"></div>
    <!-- outputs -->
    <p><strong>Characters:</strong> <span id="characters">0</span></p>
    <p><strong>Tokens:</strong> <span id="tokens">[]</span></p>
    <p><strong>AST:</strong> <span id="ast">[]</span></p>
    <p><strong>Symbols:</strong> <span id="symbols">[]</span></p>
    <p><strong>Identifiers:</strong> <span id="identifiers">[]</span></p>
    <p><strong>Issues:</strong> <span id="issues">[]</span></p>
    <p><strong>Output:</strong> <span id="output"></span></p>
    <!-- update -->
    <script>
        // editor
        const editor = document.getElementById("editor");
        editor.addEventListener("input", function() {
            const text = editor.value;
            // send to server
            fetch("/update", {
                method: "POST",
                headers: {
                    "Content-Type": "application/json",
                },
                body: JSON.stringify({ text }),
            }).then(response => {
                if (!response.ok) {
                    throw new Error("something went wrong?")
                }
                return response.json();
            }).then(data => {
                // input
                // console.log(data.input);
                document.getElementById("inputs").innerHTML = "";
                try {
                    Object.entries(JSON.parse(data.input)).forEach(identifier => {
                        // append input to inputs
                        document.getElementById("inputs").innerHTML += `<input id="input-${identifier[0]}" placeholder='${identifier[0]}' value='${identifier[1]}'></input>`;
                    });
                } catch {
                    // pass
                }
                // characters
                document.getElementById("characters").innerHTML = data.characters;
                // tokens
                document.getElementById("tokens").innerHTML = "";
                JSON.parse(data.tokens).forEach(token => {
                    document.getElementById("tokens").innerHTML = document.getElementById("tokens").innerHTML + `<span class='token-wrapper'><span class='token-value'>${token.value}</span> ${token.type}</span>, `;
                });
                // ast
                document.getElementById("ast").innerHTML = data.ast;
                // document.getElementById("ast").innerHTML = "<br>" + formatTree(data.ast);
                // symbols
                document.getElementById("symbols").innerHTML = "";
                Object.entries(JSON.parse(data.symbols)).forEach((symbol) => {
                    document.getElementById("symbols").innerHTML = document.getElementById("symbols").innerHTML + `<span class='token-wrapper'><span class='token-value'>${symbol[0]}</span> : ${symbol[1]}</span>, `;
                });
                // identifiers
                document.getElementById("identifiers").innerHTML = "";
                JSON.parse(data.identifiers).forEach(identifier => {
                    document.getElementById("identifiers").innerHTML = document.getElementById("identifiers").innerHTML + `<span class='token-wrapper'><span class='token-value'>${identifier}</span></span>, `;
                });
                // issues
                // document.getElementById("issues").innerHTML = data.issues;
                document.getElementById("issues").innerHTML = "";
                JSON.parse(data.issues).forEach(issue => {
                    if (issue.pos == null) {
                        issue.pos = "*";
                    }
                    document.getElementById("issues").innerHTML = document.getElementById("issues").innerHTML + `<br> - Token#<span class='token-wrapper'><span style='font-weight:bold;'>${issue.pos}</span> : ${issue.issue}</span>`;
                });
                // output
                document.getElementById("output").innerHTML = data.output;
            }).then(() => {
                // event listeners on inputs
                document.querySelectorAll("input").forEach(input => {
                    input.addEventListener("input", event => {
                        // console.log(input.id.split("-")[1]);
                        const identifier = input.id.split("-")[1];
                        const text = input.value;
                        // send to server
                        fetch("/input", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                            },
                            body: JSON.stringify({ identifier, text }),
                        }).then(response => {
                            if (!response.ok) {
                                throw new Error("something went wrong?")
                            }
                            return response.json();
                        }).then(data => {
                            // symbols
                            document.getElementById("symbols").innerHTML = "";
                            Object.entries(JSON.parse(data.symbols)).forEach((symbol) => {
                                document.getElementById("symbols").innerHTML = document.getElementById("symbols").innerHTML + `<span class='token-wrapper'><span class='token-value'>${symbol[0]}</span> : ${symbol[1]}</span>, `;
                            });
                            // output
                            document.getElementById("output").innerHTML = data.output;
                        }).catch(error => {
                            console.error(error);
                        });
                    });
                });
            }).catch(error => {
                console.error(error);
            });
        });
        // capture tab in textarea https://stackoverflow.com/questions/6637341/use-tab-to-indent-in-textarea
        document.getElementById('editor').addEventListener('keydown', function(e) {
            if (e.key == 'Tab') {
                e.preventDefault();
                var start = this.selectionStart;
                var end = this.selectionEnd;
                // set textarea value to text before caret + tab + text after caret
                this.value = this.value.substring(0, start) + "\t" + this.value.substring(end);
                // put caret at right position again
                this.selectionStart = this.selectionEnd = start + 1;
            }
        });
        // function to pretty print ast
        function formatTree(input, indentLevel = 0) {
            const indent = "<span style='min-width:20px;display:inline-block;'></span>".repeat(indentLevel);
            let result = '';
            let currentIndex = 0;
            while (currentIndex < input.length) {
                const char = input[currentIndex];
                if (char === '[') {
                    result += `${indent}${char}<br>`;
                    indentLevel++;
                    result += "<span style='min-width:20px;display:inline-block;'></span>".repeat(indentLevel);
                } else if (char === ']') {
                    indentLevel--;
                    result += `<br>${"<span style='min-width:20px;display:inline-block;'></span>".repeat(indentLevel)}${char}`;
                } else if (char === ',') {
                    result += ',<br>';
                    result += "<span style='min-width:20px;display:inline-block;'></span>".repeat(indentLevel);
                } else if (char === ' ' || char === '\n' || char === '\t') {
                    // pass
                } else {
                    result += char;
                }
                currentIndex++;
            }
            return result;
        }
    </script>
</body>
</html>